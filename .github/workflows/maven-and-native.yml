concurrency:
  cancel-in-progress: true
  group: $GITHUB_REF
env:
  RELEASE_JAVA_VERSION: 11
jobs:
  deb:
    env:
      DEBIAN_FRONTEND: noninteractive
      UBUNTUTOOLS_DEBIAN_MIRROR: http://debian-archive.trafficmanager.net/debian/
      UBUNTUTOOLS_DEBSEC_MIRROR: http://debian-archive.trafficmanager.net/debian-security
      UBUNTUTOOLS_UBUNTU_MIRROR: http://azure.archive.ubuntu.com/ubuntu
    name: ${{ matrix.dist.dist }} ${{ matrix.arch }}
    needs:
    - version
    - javatest
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - continue-on-error: true
      name: Get JNI headers
      uses: actions/download-artifact@v3
      with:
        name: jni_headers
        path: target/native
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-version-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-version-

          '
    - continue-on-error: true
      name: Install tools
      run: resources/deb-prepare.sh
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PW }}
      name: Import GPG key
      run: 'cat <(echo -e "${{ secrets.GPG_KEY }}") | gpg --batch --import

        gpg --list-secret-keys --keyid-format LONG

        '
    - continue-on-error: true
      env:
        GPG_PASSPHRASE: ${{ secrets.GPG_PW }}
      name: Build deb package
      run: "resources/deb-build.sh \\\n  \"${{ needs.version.outputs.version }}\"\
        \ \\\n  \"${{ matrix.dist.dist }}\" \\\n  \"${{ matrix.arch }}\"\n"
      shell: /usr/bin/sg sbuild -c "/bin/bash -e {0}"
    - continue-on-error: true
      name: Upload package as artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.dist.vendor }}-${{ matrix.dist.dist }}-${{ matrix.arch }}
        path: target/debian/${{ matrix.dist.dist }}/*
    strategy:
      fail-fast: false
      matrix:
        arch:
        - amd64
        - arm64
        - ppc64el
        dist:
        - dist: focal
          vendor: ubuntu
        - dist: jammy
          vendor: ubuntu
        - dist: lunar
          vendor: ubuntu
        - dist: bullseye
          vendor: debian
        - dist: bookworm
          vendor: debian
        include:
        - arch: i386
          dist:
            dist: buster
            vendor: debian
        - arch: i386
          dist:
            dist: bullseye
            vendor: debian
        - arch: i386
          dist:
            dist: bookworm
            vendor: debian
  deploy:
    if: github.ref == 'refs/heads/master'
    name: Deploy Debian packages
    needs:
    - version
    - multiplatform
    - deb
    secrets: inherit
    uses: ./.github/workflows/deploy-debian.yml
    with:
      release_type: unstable
      tag: r${{ needs.version.outputs.version }}
  javatest:
    name: Java ${{ matrix.java }} Test
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v3
      with:
        submodules: false
    - continue-on-error: true
      name: Install Java ${{ matrix.java }}
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: temurin
        java-version: ${{ matrix.java }}
    - continue-on-error: true
      name: Verify Java
      run: mvn -B verify -DperformRelease=true
    - continue-on-error: true
      if: matrix.java == env.RELEASE_JAVA_VERSION
      name: Upload JNI headers
      uses: actions/upload-artifact@v3
      with:
        name: jni_headers
        path: target/native
    strategy:
      fail-fast: false
      matrix:
        java:
        - 11
        - 17
  mac:
    name: Mac Natives ${{ matrix.arch }}
    needs: javatest
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - continue-on-error: true
      name: Get JNI headers
      uses: actions/download-artifact@v3
      with:
        name: jni_headers
        path: target/native
    - continue-on-error: true
      id: install_java
      name: Install Java
      uses: actions/setup-java@v3
      with:
        architecture: ${{ matrix.arch }}
        distribution: zulu
        java-version: ${{ env.RELEASE_JAVA_VERSION }}
    - continue-on-error: true
      name: Build natives
      run: 'git config --global user.email "dev@jitsi.org"

        git config --global user.name "Jitsi GitHub Action"

        brew install nasm autoconf automake libtool

        resources/mac-cmake.sh ${{ steps.install_java.outputs.path }} ${{ matrix.arch
        }}

        '
    - continue-on-error: true
      if: ${{ failure() }}
      name: The job has failed
      run: tar --exclude *.o -cvJf target/debug-logs.tar.xz src/native/cmake-build-${{
        matrix.arch }}
    - continue-on-error: true
      if: ${{ failure() }}
      name: Upload Debug logs
      uses: actions/upload-artifact@v3
      with:
        name: darwin-debug-${{ matrix.arch }}
        path: target/debug*
    - continue-on-error: true
      name: Upload Mac natives
      uses: actions/upload-artifact@v3
      with:
        name: darwin-${{ matrix.arch }}
        path: src/main/resources/darwin-*/*
    strategy:
      fail-fast: false
      matrix:
        arch:
        - x86_64
        - arm64
  multiplatform:
    name: Multiplatform Jar
    needs:
    - javatest
    - version
    - ubuntu
    - windows
    - mac
    - deb
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: false
    - continue-on-error: true
      name: Install Java ${{ env.RELEASE_JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        cache: maven
        distribution: temurin
        java-version: ${{ env.RELEASE_JAVA_VERSION }}
        server-id: ossrh
        server-password: SONATYPE_PW
        server-username: SONATYPE_USER
    - continue-on-error: true
      name: Download binaries
      uses: actions/download-artifact@v3
      with:
        path: target
    - continue-on-error: true
      name: Copy natives for Maven
      run: "BASEDIR=$(pwd)/src/main/resources\nmkdir -p $BASEDIR\ncd target\nfor dist\
        \ in */*/ ; do\n  last_dir=$(basename $dist)\n  if [[ \"$last_dir\" =~ ^(linux|darwin|win32)\
        \ ]]; then\n    mkdir -p \"$BASEDIR/$last_dir\" || true\n    cp \"$dist\"\
        /*.{so,dylib,dll} \"$BASEDIR/$last_dir\" || true\n  fi;\ndone;\n"
    - continue-on-error: true
      env:
        SONATYPE_PW: ${{ secrets.SONATYPE_PW }}
        SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
      if: github.ref == 'refs/heads/master'
      name: Release to Maven Central
      run: "cat <(echo -e \"${{ secrets.GPG_KEY }}\") | gpg --batch --import\ngpg\
        \ --list-secret-keys --keyid-format LONG\nmvn -B versions:set -DnewVersion=${{\
        \ needs.version.outputs.version }} -DgenerateBackupPoms=false\nmvn \\\n  --no-transfer-progress\
        \ \\\n  --batch-mode \\\n  -Dgpg.passphrase=\"${{ secrets.GPG_PW }}\" \\\n\
        \  -DperformRelease=true \\\n  -Drelease=true \\\n  -Dosgi-native=true \\\n\
        \  -DskipTests \\\n  deploy\n"
    - continue-on-error: true
      if: github.ref != 'refs/heads/master'
      name: Package on PR
      run: "mvn -B versions:set -DnewVersion=${{ needs.version.outputs.version }}\
        \ -DgenerateBackupPoms=false\nmvn \\\n  --no-transfer-progress \\\n  --batch-mode\
        \ \\\n  -Dgpg.skip \\\n  -DperformRelease=true \\\n  -Drelease=true \\\n \
        \ -Dosgi-native=true \\\n  -DskipTests \\\n  package\n"
    - continue-on-error: true
      name: Upload Multi-Platform Jar
      uses: actions/upload-artifact@v3
      with:
        if-no-files-found: error
        name: jar
        path: target/*.jar
    - continue-on-error: true
      name: Pack all debs to avoid Github filename mangling
      run: 'tar -cvf debian-releases.tar target/{debian-*,ubuntu-*}/*

        '
    - continue-on-error: true
      if: github.ref == 'refs/heads/master'
      name: Create release
      uses: ncipollo/release-action@37c87f6b53fb46d40450c3cac428aa83c8d0055f
      with:
        allowUpdates: true
        artifactErrorsFailBuild: true
        artifacts: target/*.jar,debian-releases.tar
        draft: false
        omitBody: true
        prerelease: true
        removeArtifacts: true
        replacesArtifacts: true
        tag: r${{ needs.version.outputs.version }}
        token: ${{ secrets.GITHUB_TOKEN }}
    - continue-on-error: true
      if: needs.version.outputs.create_tag == 'true'
      name: Tag
      run: 'git config --local user.name "$GITHUB_ACTOR via GitHub Actions"

        git config --local user.email "actions@github.com"

        git tag -a "${{ needs.version.outputs.tag_name }}" -m "Tagged automatically
        by GitHub Actions ${{ github.workflow }}"

        git push origin "${{ needs.version.outputs.tag_name }}"

        '
  ubuntu:
    name: Linux Static Natives ${{ matrix.arch }}
    needs: javatest
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - continue-on-error: true
      name: Get JNI headers
      uses: actions/download-artifact@v3
      with:
        name: jni_headers
        path: target/native
    - continue-on-error: true
      env:
        DEBIAN_FRONTEND: noninteractive
      name: Install packages for native build
      run: "# Remove broken packages from pre-installed php in Actions image\n# No\
        \ longer needed in ubuntu-22.04\nsudo apt-get remove -y libpcre2-dev libicu-dev\
        \ icu-devtools\nsudo apt-add-repository ppa:ondrej/php -y\nsudo apt-get install\
        \ -y aptitude\necho \"Get::allow-downgrades \\\"true\\\";\" | sudo tee /etc/apt/apt.conf.d/99-downgrades\n\
        echo \"Get::Assume-Yes \\\"true\\\";\" | sudo tee -a /etc/apt/apt.conf.d/99-downgrades\n\
        sudo ./resources/ubuntu-build-image/ppa-purge.sh ppa:ondrej/php -y true\n\
        if [ \"${{ matrix.arch }}\" != \"x86\" ] && [ \"${{ matrix.arch }}\" != \"\
        x86-64\" ]; then\n  sudo cp -f resources/ubuntu-build-image/ports-sources.list\
        \ /etc/apt/sources.list\nfi\nsudo ./resources/ubuntu-build-image/packages.sh\
        \ ${{ matrix.arch }} ${{ env.RELEASE_JAVA_VERSION }}\n"
    - continue-on-error: true
      name: Build natives ${{ matrix.arch }}
      run: ./resources/ubuntu-build-image/build-static.sh ${{ matrix.arch }} ${{ env.RELEASE_JAVA_VERSION
        }} "$(pwd)"
    - continue-on-error: true
      name: Upload Linux ${{ matrix.arch }} natives
      uses: actions/upload-artifact@v3
      with:
        name: linux-${{ matrix.arch }}
        path: src/main/resources/linux-*/*
    strategy:
      fail-fast: false
      matrix:
        arch:
        - x86
        - x86-64
        - arm64
        - ppc64el
  version:
    name: Prepare version
    outputs:
      create_tag: ${{ steps.version.outputs.create_tag }}
      tag_name: ${{ steps.version.outputs.tag_name }}
      version: ${{ steps.version.outputs.version }}
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - continue-on-error: true
      name: Set up JDK
      uses: actions/setup-java@v3
      with:
        distribution: temurin
        java-version: ${{ env.RELEASE_JAVA_VERSION }}
    - continue-on-error: true
      name: Cache local Maven repository
      uses: actions/cache@v3
      with:
        key: ${{ runner.os }}-maven-version-${{ hashFiles('**/pom.xml') }}
        path: ~/.m2/repository
        restore-keys: '${{ runner.os }}-maven-version-

          '
    - continue-on-error: true
      id: version
      name: Parse and set version
      run: "MVNVER=`mvn help:evaluate -Dexpression=project.version -q -DforceStdout`\n\
        if [ \"$GITHUB_REF\" == \"refs/heads/master\" ]; then\n  TAG_NAME=\"v${MVNVER/-SNAPSHOT/}\"\
        \n  if ! git rev-parse \"$TAG_NAME\" >/dev/null 2>&1\n  then\n    echo \"\
        Creating tag $TAG_NAME\"\n    git config --local user.name \"$GITHUB_ACTOR\
        \ via GitHub Actions\"\n    git config --local user.email \"actions@github.com\"\
        \n    git tag -a \"$TAG_NAME\" -m \"Tagged automatically by GitHub Actions\
        \ ${{ github.workflow }}\"\n    echo \"create_tag=true\" >> $GITHUB_OUTPUT\n\
        \  else\n    echo \"Tag: $TAG_NAME already exists\"\n    echo \"create_tag=false\"\
        \ >> $GITHUB_OUTPUT\n  fi\n  VERSION=`git describe --match \"v[0-9\\.]*\"\
        \ --long --always`\n  VERSION=${VERSION:1}\nelse\n  echo \"Not on master\"\
        \n  echo \"create_tag=false\" >> $GITHUB_OUTPUT\n  VERSION=${MVNVER}\nfi\n\
        echo \"Version: $VERSION\"\necho \"version=${VERSION}\" >> $GITHUB_OUTPUT\n\
        echo \"tag_name=${TAG_NAME}\" >> $GITHUB_OUTPUT\n"
  windows:
    name: Windows Natives ${{ matrix.arch.actions }}
    needs: javatest
    runs-on: self-hosted
    steps:
    - continue-on-error: true
      name: Checkout
      uses: actions/checkout@v3
      with:
        fetch-depth: 0
        submodules: true
    - continue-on-error: true
      name: Get JNI headers
      uses: actions/download-artifact@v3
      with:
        name: jni_headers
        path: target/native
    - continue-on-error: true
      id: install_java
      name: Install Java ${{ env.RELEASE_JAVA_VERSION }}
      uses: actions/setup-java@v3
      with:
        architecture: ${{ matrix.arch.actions }}
        distribution: temurin
        java-version: ${{ env.RELEASE_JAVA_VERSION }}
    - continue-on-error: true
      name: Build natives
      run: 'git config --global user.email "jitsi-jenkins@jitsi.org"

        git config --global user.name "Jitsi GitHub Action"

        cd $Env:GITHUB_WORKSPACE/src/native/

        $java_home = "${{ steps.install_java.outputs.path }}".Replace("\\", "/")

        cmake -B cmake-build-${{ matrix.arch.actions }} -DVCPKG_TARGET_TRIPLET=${{
        matrix.arch.cmake }}-windows-static -A ${{ matrix.arch.cmake }} -DJAVA_HOME=$java_home

        cmake --build cmake-build-${{ matrix.arch.actions }} --config Release --target
        install --parallel

        '
    - continue-on-error: true
      if: ${{ failure() }}
      name: Gather logs on failure
      run: 'Compress-Archive -Path $Env:GITHUB_WORKSPACE/src/native/cmake-build-${{
        matrix.arch.actions }} -DestinationPath $Env:GITHUB_WORKSPACE/target/debug-logs.zip

        Compress-Archive -Path $Env:GITHUB_WORKSPACE/src/native/vcpkg/buildtrees -DestinationPath
        $Env:GITHUB_WORKSPACE/target/debug-vcpkg.zip

        '
    - continue-on-error: true
      if: ${{ failure() }}
      name: Upload Debug logs
      uses: actions/upload-artifact@v3
      with:
        name: win32-debug-${{ matrix.arch.java }}
        path: target/debug*
    - continue-on-error: true
      name: Upload Windows ${{ matrix.arch.actions }} natives
      uses: actions/upload-artifact@v3
      with:
        name: win32-${{ matrix.arch.java }}
        path: src/main/resources/win32-*/*
    strategy:
      fail-fast: false
      matrix:
        arch:
        - actions: x64
          cmake: x64
          java: x86-64
name: CI with CMake and Maven
on:
  repository_dispatch:
    types: trigger-ga___maven-and-native.yml
